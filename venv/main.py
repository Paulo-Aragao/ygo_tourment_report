# -*- coding: utf-8 -*-
"""YugiohGraph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9Rp-PpkspIPlG7rDdt9V3iUvYVETAkI
"""

#yugioh
import numpy as np 
import matplotlib.pyplot as plt
from matplotlib.patches import PathPatch
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
import json
import pandas as pd
from pickle import TRUE
import cv2 as cv
import matplotlib.image as mpimg
import math
import requests
from flask import Flask, render_template
def read_image_url(url):
  resp = requests.get(url, stream=True).raw
  image = np.asarray(bytearray(resp.read()), dtype="uint8")
  image = cv.imdecode(image, cv.IMREAD_LOAD_GDAL)
  imageRGB = cv.cvtColor(image , cv.COLOR_BGR2RGB)
  return imageRGB

def img_to_pie( url, wedge, xy, zoom=1, ax = None):
    if ax==None: ax=plt.gca()
    user_agent = {"User-Agent": "Mozilla/5.0"}
    im = read_image_url(url)
    path = wedge.get_path()
    patch = PathPatch(path, facecolor='none')
    ax.add_patch(patch)
    imagebox = OffsetImage(im, zoom=zoom, clip_path=patch, zorder=-10)
    ab = AnnotationBbox(imagebox, xy, xycoords='data', pad=0, frameon=False)
    ax.add_artist(ab)

def apply_images(wedges,images,positions,zoom):
    for i in range(len(images)):
        url = images[i]
        img_to_pie(url, wedges[i], xy=positions[i], zoom= zoom[i] )
        wedges[i].set_zorder(5)

def create_positions(labels):
    positions = []
    for i in labels:
        positions.append((0,-0.5))
    return positions

def sort_arrays(images, names ,totals):
    num = totals
    totals,images = zip(*sorted(zip(num,images)))
    totals,names = zip(*sorted(zip(num,names)))
    return images, names ,totals

class deck_info():
    def __init__(self,name,key_card ,total):
        self.name = name + " x"+str(total)
        self.image = self.get_image_of_card(key_card)[0]
        self.total = total
    def get_image_of_card(self,card_name):
        card_name = card_name.lower()
        return df.loc[df['name'] == card_name]["image_cropped"].values

def apply_zoom(total):
    if total == 1:
        return 0.36
    elif total == 2:
        return 0.44
    elif total >= 3:
        return 0.66

def define_zoom_and_angles():
    angle_per_slice = 360/sum(totals)
    i_slice = 0
    k = 0.5
    positions = []
    zooms = []
    for i in range(len(totals)):
        i_slice = i_slice+totals[i]
        res = ((i_slice * angle_per_slice) + 90) - (angle_per_slice * (totals[i]/2))
        print(names[i]+" -> "+str(res))
        positions.append((math.cos(math.radians(res)) * k,math.sin(math.radians(res)) * k))
        zooms.append(apply_zoom(totals[i]))
    return positions,zooms

def plot_graphic(names,images,totals,positions,zooms):
    plt.title('torneio semanal dominaria 14/01/2022')
    plt.gca().axis("equal")
    wedges, texts = plt.pie(totals, startangle=90, labels=names,
                            wedgeprops = { 'linewidth': 2, "edgecolor" :"g","fill":False, 'linestyle': 'dashed'})

    apply_images(wedges,images,positions,zooms)
    plt.savefig('histogram_img.png', dpi=300)
    plt.rcParams['figure.figsize'] = [10, 10]
    #plt.show()
    #plt.figure(figsize=(18,12))
    plt.show()

#flask

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('home.html')

if __name__ == '__main__':
    app.run()




